import Head from 'next/head'
import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/router'

import styles from "styles/main/index.module.css"

import { fetchText } from 'src/hooks/fetchText'
import useUserData from 'src/context/useUserData'
import { firebaseHooks } from 'firebase/hooks'
import useAuth from 'src/hooks/auth/auth'

import MainSwiper from "src/components/main/MainSwiper"
import Menu from "src/components/main/Menu"
import Program from "src/components/main/Program"
import Survey from "src/components/main/Survey"
import Anouncement from "src/components/main/Anouncement"
import News from "src/components/main/News"
import DialogSetting from "src/components/main/DialogSetting"
import BottomNavigation from "src/components/public/BottomNavigation"


import MenuRoundedIcon from '@mui/icons-material/MenuRounded';
import NotificationsNoneIcon from '@mui/icons-material/NotificationsNone';
import Skeleton from '@mui/material/Skeleton';

import { firestore as db } from "firebase/firebase"

import { useIntl } from "react-intl";

const Home = () => {
  const [text, setText] = useState()
  const [scrollY, setScrollY] = useState(0)
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [isHide, setIsHide] = useState(false)
  const handleIsMenuOpen = (bool) => { setIsMenuOpen(bool); }
  const [isLoading, setIsLoading] = useState(true)
  const { setLanguage, groups, setGroups } = useUserData()
  const [openDialogSetting, setOpenDialogSetting] = useState(false)
  const { user } = useAuth()
  const router = useRouter()
  const intl = useIntl()
  
  //scroll Y 포지션
  useEffect(() => {
    const handleScroll = () => {
      setScrollY(window.scrollY);
    };
    // const locale = localStorage.getItem('language') || 'ko';
    // setLanguage(locale)
    window.addEventListener("scroll", handleScroll);
    const city = localStorage.getItem("city")
    if (user !== null) {
      db.collection("users").doc(user.uid).get().then((doc) => {
        if (doc.exists) {
          if (doc.data().city === undefined || city === null) {
            setOpenDialogSetting(true)
          }
        }
      })
    }
    
    const language = localStorage.getItem('language')
    if (language === null) {
      localStorage.setItem("language", "ko")
      setLanguage("ko")
    } else
      setLanguage(language)

   const fetchData = async () => {
      // if (groups.length===0) {
        const result = await firebaseHooks.fetch_team_list()
        setGroups(result)
      // }
    }
    fetchData()




    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  const onMenuClick = () => {
    setIsMenuOpen(true)
    setTimeout(() => {
      setIsHide(true)
    }, 400)
  }

  // if (isLoading)
  //   return <div>  </div>
  // else
  return (
    <div>
      <Head>
        <title>다문화소식</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!isMenuOpen &&
        <div className={scrollY === 0 ? styles.header_container : `${styles.header_container} ${styles.add_background}`}>
          <h1>더한다+</h1>
          <div>
            <NotificationsNoneIcon />
            <MenuRoundedIcon className={styles.menu_icon} onClick={onMenuClick} />
          </div>
        </div>
      }
      <Menu isMenuOpen={isMenuOpen} handleIsMenuOpen={handleIsMenuOpen}  setIsHide={setIsHide} /> 
      {!isHide && 
        <>
          <MainSwiper />
          {/* <SelectLanguage /> */}
          <Program />
          <div className={styles.border} />
          <Survey />
          <div className={styles.border} />
          <Anouncement />
          <div className={styles.border} />
        <News />
        <div className={styles.border} />
          <div style={{width:"100%", height:"150px"}}> </div>
        </>
      }
      {openDialogSetting && <DialogSetting isShow={openDialogSetting} handleShow={setOpenDialogSetting} />}
      {!openDialogSetting && <BottomNavigation />}
    </div>
  )
}
export default Home